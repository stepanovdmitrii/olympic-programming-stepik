#include <deque>
#include <iostream>


/*
Полка
Есть длинная полка для книг. В каждый момент времени можно либо поставить книгу на полку слева от уже стоящих, либо справа от уже стоящих. Если книг на полке нет, то книга просто помещается на полку. Забирать книги можно тоже либо крайнюю слева, либо крайнюю справа. Задана последовательность операций с книгами. Запись 1 означает, что книгу с текущим номером нужно поставить слева от уже стоящих, запись 2 означает ту же операцию, но справа. Запись 3 означает, что книгу нужно забрать слева, запись 4 обозначает, что книгу нужно забрать справа. Книги нумеруются с 1 и выставляются на полку по порядку номеров. Для указанного списка операций нужно вывести для каждого операция снятия книги ее номер, либо -1, если книг на момент снятия на полке нет.

Входные данные:
В первой строке число N, 1 ≤ N ≤ 105. Во второй строке N целых чисел через пробел, числа от 1 до 4. Есть, по крайней мере, одна операция взятия книги с полки.

Выходные данные:
Для каждой операции взятия в порядке их следования вывести через пробел в строку номер снимаемой книги.

Sample Input:

26
1 2 3 4 3 1 1 1 2 2 2 2 3 3 3 3 2 3 1 3 1 4 2 3 3 4

Sample Output:

1 2 -1 5 4 3 6 7 11 10 12 8 13 
*/


int main() {
    size_t n;
    std::cin >> n;

    std::deque<size_t> d;
    size_t idx = 1;

    for(size_t i = 0; i < n; ++i) {
        size_t op;
        std::cin >> op;
        if(op == 1) {
            d.push_front(idx++);
        } else if (op == 2) {
            d.push_back(idx++);
        } else if (d.empty()) {
            std::cout << -1 << " ";
        } else if (op == 3) {
            std::cout << d.front() << " ";
            d.pop_front();
        } else if (op == 4) {
            std::cout << d.back() << " ";
            d.pop_back();
        }
    }
    return 0;
}